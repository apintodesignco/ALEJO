name: ALEJO Comprehensive Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - '[MAJOR FEATURE]*'
      - '[SECURITY FIX]*'
      - '[PERFORMANCE]*'
      - '[UX]*'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

# Environment variables available to all jobs and steps
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  CI_MODE: 'true'

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi
      
      - name: Run ESLint
        run: |
          if [ -f package.json ] && grep -q "\"lint\"" package.json; then
            npm run lint || echo "::warning::Linting issues found"
          else
            echo "No lint script found in package.json, skipping linting"
          fi
        continue-on-error: true
      
      - name: Run Python linting
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "::warning::Flake8 issues found"
          black --check . || echo "::warning::Black formatting issues found" 
          isort --check-only --profile black . || echo "::warning::Import sorting issues found"
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      
      - name: Run Python security scan
        run: bandit -r . -ll -ii -x "tests/*,node_modules/*" || echo "::warning::Security issues found"
        continue-on-error: true
      
      - name: Check dependencies
        run: safety check || echo "::warning::Dependency issues found"
        continue-on-error: true
      
      - name: Run JavaScript security scan
        run: |
          if [ -f package.json ]; then
            npm audit --production || echo "::warning::npm audit issues found"
          else
            echo "No package.json found, skipping npm audit"
          fi
        continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping pip install"
          fi
          pip install pytest pytest-cov pytest-xdist
      
      - name: Install Node.js dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi
      
      - name: Run Python unit tests
        run: |
          if [ -d "tests" ]; then
            python -m pytest tests -v --junitxml=test-reports/pytest-results.xml || echo "::warning::Python tests failed"
          else
            echo "No tests directory found, skipping Python tests"
          fi
        continue-on-error: true
      
      - name: Run JavaScript unit tests
        run: |
          if [ -f package.json ] && grep -q "\"test\"" package.json; then
            npm test || echo "::warning::JavaScript tests failed"
          else
            echo "No test script found in package.json, skipping JavaScript tests"
          fi
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            test-reports/
            coverage/
            vitest-results.json
          retention-days: 7
        if: always()

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f package.json ]; then
            npm ci
          fi
      
      - name: Run comprehensive tests
        run: |
          if [ -f run_comprehensive_tests.py ]; then
            chmod +x run_comprehensive_tests.py
            python run_comprehensive_tests.py --integration --report --verbose --output test_reports || echo "::warning::Comprehensive tests failed"
          elif [ -f run_integration_tests.py ]; then
            python run_integration_tests.py || echo "::warning::Integration tests failed"
          else
            echo "No integration test script found, skipping integration tests"
          fi
        continue-on-error: true
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test_reports/
          retention-days: 7
        if: always()

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-scan, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f package.json ]; then
            npm ci
          fi
      
      - name: Build JavaScript application
        run: |
          if [ -f package.json ] && grep -q "\"build\"" package.json; then
            npm run build || echo "::warning::Build failed"
          else
            echo "No build script found in package.json, skipping build"
          fi
        continue-on-error: true
      
      - name: Create distribution package
        run: |
          mkdir -p dist
          if [ -d "build" ]; then
            cp -r build dist/
          fi
          if [ -d "public" ]; then
            cp -r public dist/
          fi
          tar -czf alejo-dist.tar.gz --exclude="node_modules" --exclude=".git" .
        continue-on-error: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            alejo-dist.tar.gz
          retention-days: 7
        if: always()

  report:
    name: Generate Report
    if: always()
    needs: [lint, security-scan, unit-tests, integration-tests, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      
      - name: Generate comprehensive report
        run: |
          echo "# ALEJO CI/CD Pipeline Report" > report.md
          echo "Generated on: $(date)" >> report.md
          echo "" >> report.md
          echo "## Status Summary" >> report.md
          echo "" >> report.md
          echo "- Lint Status: ${{ needs.lint.result }}" >> report.md
          echo "- Security Scan Status: ${{ needs.security-scan.result }}" >> report.md
          echo "- Unit Tests Status: ${{ needs.unit-tests.result }}" >> report.md
          echo "- Integration Tests Status: ${{ needs.integration-tests.result }}" >> report.md
          echo "- Build Status: ${{ needs.build.result }}" >> report.md
          echo "" >> report.md
          echo "## Artifact List" >> report.md
          echo "" >> report.md
          find all-artifacts -type f | sort >> report.md
      
      - name: Upload pipeline report
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-report
          path: |
            report.md
            all-artifacts/
          retention-days: 7
