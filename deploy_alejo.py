#!/usr/bin/env python3
"""
ALEJO Production Deployment Script
Prepares ALEJO for production deployment with optimized settings
"""
import os
import sys
import shutil
import logging
import argparse
import subprocess
from pathlib import Path
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('deploy.log')
    ]
)

logger = logging.getLogger(__name__)

# Add the current directory to the path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))


def parse_arguments():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='ALEJO Production Deployment')
    
    parser.add_argument('--host', type=str, default='0.0.0.0', help='Production host (default: 0.0.0.0)')
    parser.add_argument('--port', type=int, default=5000, help='Production port (default: 5000)')
    parser.add_argument('--workers', type=int, default=4, help='Number of Gunicorn workers (default: 4)')
    parser.add_argument('--ssl', action='store_true', help='Enable SSL (HTTPS)')
    parser.add_argument('--ssl-cert', type=str, help='Path to SSL certificate')
    parser.add_argument('--ssl-key', type=str, help='Path to SSL key')
    parser.add_argument('--optimize-assets', action='store_true', help='Optimize static assets')
    parser.add_argument('--create-env', action='store_true', help='Create production .env file')
    
    return parser.parse_args()


def create_production_env(args):
    """Create a production .env file"""
    env_file = Path(os.path.dirname(os.path.abspath(__file__))) / '.env.production'
    
    # Generate production environment variables
    env_content = f"""# ALEJO Production Environment Configuration
# Generated by deploy_alejo.py

# Web Interface Configuration
ALEJO_HOST={args.host}
ALEJO_PORT={args.port}
ALEJO_DEBUG=False

# Security
FLASK_SECRET_KEY={os.urandom(24).hex()}

# Features
ENABLE_VOICE=True
ENABLE_VISION=True
ENABLE_HOLOGRAPHIC_UI=True
DEFAULT_VIEW=holographic

# Performance
THREAD_POOL_SIZE={args.workers}
MAX_CONNECTIONS=1000

# Logging
LOG_LEVEL=WARNING
LOG_FILE=logs/alejo_production.log

# Data Storage
DATA_DIR=data
"""
    
    # Write the production .env file
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    logger.info(f"Created production environment file at {env_file}")
    
    # Copy to .env if requested
    if args.create_env:
        shutil.copy(env_file, Path(os.path.dirname(os.path.abspath(__file__))) / '.env')
        logger.info("Copied production environment to .env")
    
    return env_file


def optimize_static_assets():
    """Optimize static assets for production"""
    logger.info("Optimizing static assets...")
    
    # Get paths
    static_dir = Path(os.path.dirname(os.path.abspath(__file__))) / 'core' / 'web' / 'static'
    css_dir = static_dir / 'css'
    js_dir = static_dir / 'js'
    
    # Create optimized directories
    optimized_dir = static_dir / 'optimized'
    os.makedirs(optimized_dir, exist_ok=True)
    os.makedirs(optimized_dir / 'css', exist_ok=True)
    os.makedirs(optimized_dir / 'js', exist_ok=True)
    
    # Optimize CSS files
    for css_file in css_dir.glob('*.css'):
        logger.info(f"Optimizing CSS: {css_file.name}")
        try:
            # Simple CSS minification
            with open(css_file, 'r') as f:
                css_content = f.read()
            
            # Remove comments
            css_content = ' '.join([line for line in css_content.split('\n') 
                                   if not line.strip().startswith('/*') and not line.strip().endswith('*/') 
                                   and not line.strip().startswith('//')])
            
            # Remove whitespace
            css_content = css_content.replace('  ', ' ').replace('\n', '')
            
            # Write optimized file
            with open(optimized_dir / 'css' / css_file.name, 'w') as f:
                f.write(css_content)
                
        except Exception as e:
            logger.error(f"Failed to optimize CSS file {css_file.name}: {e}")
    
    # Optimize JS files
    for js_file in js_dir.glob('*.js'):
        logger.info(f"Optimizing JS: {js_file.name}")
        try:
            # Simple JS minification
            with open(js_file, 'r') as f:
                js_content = f.read()
            
            # Remove comments (simple approach)
            js_content = ' '.join([line for line in js_content.split('\n') 
                                  if not line.strip().startswith('//') and not line.strip().startswith('/*')])
            
            # Remove excessive whitespace
            js_content = js_content.replace('  ', ' ').replace('\n', '')
            
            # Write optimized file
            with open(optimized_dir / 'js' / js_file.name, 'w') as f:
                f.write(js_content)
                
        except Exception as e:
            logger.error(f"Failed to optimize JS file {js_file.name}: {e}")
    
    logger.info(f"Static assets optimized and saved to {optimized_dir}")
    return optimized_dir


def create_gunicorn_config(args, env_file):
    """Create a Gunicorn configuration file for production deployment"""
    config_file = Path(os.path.dirname(os.path.abspath(__file__))) / 'gunicorn_config.py'
    
    # Generate Gunicorn configuration
    config_content = f"""# Gunicorn configuration for ALEJO
import multiprocessing

# Server socket
bind = '{args.host}:{args.port}'
backlog = 2048

# Worker processes
workers = {args.workers or multiprocessing.cpu_count() * 2 + 1}
worker_class = 'eventlet'
worker_connections = 1000
timeout = 30
keepalive = 2

# Server mechanics
daemon = False
pidfile = 'gunicorn.pid'
umask = 0
user = None
group = None
tmp_upload_dir = None

# Logging
errorlog = 'logs/gunicorn-error.log'
accesslog = 'logs/gunicorn-access.log'
loglevel = 'warning'

# Process naming
proc_name = 'alejo_gunicorn'

# SSL configuration
"""
    
    # Add SSL configuration if enabled
    if args.ssl:
        if args.ssl_cert and args.ssl_key:
            config_content += f"""
# SSL Configuration
certfile = '{args.ssl_cert}'
keyfile = '{args.ssl_key}'
ssl_version = 'TLS'
"""
        else:
            logger.warning("SSL enabled but no certificate/key provided. HTTPS will not be available.")
    
    # Write the configuration file
    with open(config_file, 'w') as f:
        f.write(config_content)
    
    logger.info(f"Created Gunicorn configuration file at {config_file}")
    return config_file


def create_wsgi_file():
    """Create a WSGI file for production deployment"""
    wsgi_file = Path(os.path.dirname(os.path.abspath(__file__))) / 'wsgi.py'
    
    # Generate WSGI file
    wsgi_content = """#!/usr/bin/env python3
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Add the current directory to the path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Load environment variables
env_file = Path(os.path.dirname(os.path.abspath(__file__))) / '.env'
if env_file.exists():
    load_dotenv(env_file)

# Import ALEJO components
try:
    from core.brain import ALEJOBrain
    from core.voice import VoiceService
    from core.web.web_interface.__init__ import ALEJOWebInterface, initialize_wsgi
except ImportError as e:
    print(f"Import error: {e}")
    print("Trying alternative import paths...")
    try:
        from core.brain.brain import ALEJOBrain
        from core.voice.voice import VoiceService
        from core.web.web_interface import ALEJOWebInterface
        
        # Define initialize_wsgi function if not available
        def initialize_wsgi(web_interface_instance):
            global app, socketio
            app = web_interface_instance.app
            socketio = web_interface_instance.socketio
    except ImportError as e2:
        print(f"Failed to import ALEJO components: {e2}")
        print("Please check your project structure and try again.")
        sys.exit(1)

# Create configuration
config = {
    "port": int(os.environ.get('ALEJO_PORT', 5000)),
    "host": os.environ.get('ALEJO_HOST', '0.0.0.0'),
    "debug": os.environ.get('ALEJO_DEBUG', 'False').lower() in ('true', 'yes', '1'),
    "enable_voice": os.environ.get('ENABLE_VOICE', 'True').lower() in ('true', 'yes', '1'),
    "enable_vision": os.environ.get('ENABLE_VISION', 'True').lower() in ('true', 'yes', '1'),
    "holographic_ui": os.environ.get('ENABLE_HOLOGRAPHIC_UI', 'True').lower() in ('true', 'yes', '1'),
    "default_view": os.environ.get('DEFAULT_VIEW', 'holographic'),
    "enable_3d": True,
    "secret_key": os.environ.get('FLASK_SECRET_KEY', os.urandom(24).hex()),
    "thread_pool_size": int(os.environ.get('THREAD_POOL_SIZE', 4)),
    "max_connections": int(os.environ.get('MAX_CONNECTIONS', 100))
}

try:
    # Initialize components
    brain = ALEJOBrain()
    
    # Initialize voice service if enabled
    voice = None
    if config["enable_voice"]:
        try:
            voice = VoiceService()
        except Exception as e:
            print(f"Failed to initialize voice service: {e}")
    
    # Initialize web interface
    web_interface = ALEJOWebInterface(brain, voice, config)
    web_interface.app.secret_key = config["secret_key"]
    
    # Initialize WSGI components
    try:
        initialize_wsgi(web_interface)
    except Exception as e:
        print(f"Warning: Could not initialize WSGI components: {e}")
        print("Using direct application reference instead.")
    
    # Export Flask application for Gunicorn
    application = web_interface.app
    
    print("WSGI application initialized successfully")
    
except Exception as e:
    print(f"Error initializing ALEJO components: {e}")
    print("Please check your configuration and try again.")
    sys.exit(1)
"""
    
    # Write the WSGI file
    with open(wsgi_file, 'w') as f:
        f.write(wsgi_content)
    
    logger.info(f"Created WSGI file at {wsgi_file}")
    return wsgi_file


def create_systemd_service():
    """Create a systemd service file for ALEJO"""
    service_file = Path(os.path.dirname(os.path.abspath(__file__))) / 'alejo.service'
    
    # Get the absolute path to the ALEJO directory
    alejo_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Generate systemd service file
    service_content = f"""[Unit]
Description=ALEJO AI Assistant
After=network.target

[Service]
User=www-data
Group=www-data
WorkingDirectory={alejo_dir}
ExecStart=/usr/local/bin/gunicorn -c {alejo_dir}/gunicorn_config.py wsgi:application
Restart=always
RestartSec=5
Environment="PATH=/usr/local/bin:/usr/bin:/bin"
Environment="PYTHONPATH={alejo_dir}"

[Install]
WantedBy=multi-user.target
"""
    
    # Write the service file
    with open(service_file, 'w') as f:
        f.write(service_content)
    
    logger.info(f"Created systemd service file at {service_file}")
    logger.info("To install the service:")
    logger.info(f"  sudo cp {service_file} /etc/systemd/system/")
    logger.info("  sudo systemctl daemon-reload")
    logger.info("  sudo systemctl enable alejo")
    logger.info("  sudo systemctl start alejo")
    
    return service_file


def check_dependencies():
    """Check for production dependencies"""
    logger.info("Checking production dependencies...")
    
    missing_deps = []
    
    # Check for Gunicorn
    try:
        subprocess.run(['pip', 'show', 'gunicorn'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except:
        missing_deps.append('gunicorn')
    
    # Check for Eventlet
    try:
        subprocess.run(['pip', 'show', 'eventlet'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except:
        missing_deps.append('eventlet')
    
    # Check for python-dotenv
    try:
        subprocess.run(['pip', 'show', 'python-dotenv'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except:
        missing_deps.append('python-dotenv')
    
    if missing_deps:
        logger.warning(f"Missing production dependencies: {', '.join(missing_deps)}")
        logger.info("Installing missing dependencies...")
        try:
            subprocess.run(['pip', 'install'] + missing_deps, check=True)
            logger.info("Dependencies installed successfully")
        except Exception as e:
            logger.error(f"Failed to install dependencies: {e}")
            return False
    else:
        logger.info("All production dependencies are installed")
    
    return True


def main():
    """Main entry point for ALEJO deployment"""
    logger.info("Starting ALEJO production deployment...")
    
    # Parse command line arguments
    args = parse_arguments()
    
    # Check dependencies
    if not check_dependencies():
        logger.error("Missing dependencies. Please install them manually.")
        return False
    
    # Create production environment file
    env_file = create_production_env(args)
    
    # Optimize static assets if requested
    if args.optimize_assets:
        optimize_static_assets()
    
    # Create Gunicorn configuration
    gunicorn_config = create_gunicorn_config(args, env_file)
    
    # Create WSGI file
    wsgi_file = create_wsgi_file()
    
    # Create systemd service file
    service_file = create_systemd_service()
    
    logger.info("ALEJO production deployment preparation complete!")
    logger.info("To start ALEJO in production mode:")
    logger.info(f"  gunicorn -c {gunicorn_config} wsgi:application")
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
