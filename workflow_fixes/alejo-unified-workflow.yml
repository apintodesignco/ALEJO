name: ALEJO Unified Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - '[MAJOR FEATURE]*'
      - '[SECURITY FIX]*'
      - '[PERFORMANCE]*'
      - '[UX]*'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      update_type:
        description: 'Type of update'
        required: false
        default: 'feature'
        type: choice
        options:
          - feature
          - security
          - performance
          - user-experience

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Run security scanner
        run: |
          if [ -f alejo_security_scanner.py ]; then
            chmod +x alejo_security_scanner.py
            python alejo_security_scanner.py --ci --report --fail-on medium --ignore-warnings || echo "Security scanner issues found but continuing build"
          else
            echo "Security scanner script not found, skipping this step"
          fi
          
      - name: Check for hardcoded secrets
        run: |
          bandit -r . -ll -ii -x "tests/*,node_modules/*" || echo "Bandit issues found but continuing build"
          
      - name: Check for vulnerable dependencies
        run: |
          safety check || echo "Dependency issues found but continuing build"

  test:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Try requirements-full.txt first, fall back to requirements.txt
          if [ -f requirements-full.txt ]; then
            pip install -r requirements-full.txt || echo "Warning: Some requirements could not be installed"
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt || echo "Warning: Some requirements could not be installed"
          fi
          # Install development and testing tools
          pip install pytest pytest-cov pytest-xdist
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Node dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          fi
          
      - name: Install Redis
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          redis-server --daemonize yes
          redis-cli ping
          
      - name: Lint code
        run: |
          if [ -f package.json ] && grep -q "\"lint\"" package.json; then 
            npm run lint || echo "Linting issues found but continuing build"
          fi
          
      - name: Run comprehensive tests
        run: |
          # Use the orchestration script if available
          if [ -f run_comprehensive_tests.py ]; then
            chmod +x run_comprehensive_tests.py
            python run_comprehensive_tests.py --unit --integration --report --ci --skip-failing || echo "Some tests failed but continuing build"
          # Fall back to NPM tests if available
          elif [ -f package.json ] && grep -q "\"test\"" package.json; then
            npm test || echo "Some tests failed but continuing build"
          # Fall back to pytest
          elif [ -d "tests" ]; then
            python -m pytest tests -v || echo "Some tests failed but continuing build"
          else
            echo "No test files found, skipping tests"
          fi
          
      - name: Report test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: ALEJO Test Results
          path: vitest-results.json
          reporter: vitest-json
          fail-on-error: false
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test_reports/
            vitest-results.json
            coverage/

  build:
    name: Build ALEJO
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f package.json ]; then 
            npm ci
          fi
          
      - name: Build application
        run: |
          if [ -f package.json ] && grep -q "\"build\"" package.json; then
            npm run build
          else
            echo "No build script found in package.json, skipping build"
          fi
          
      - name: Package application
        run: |
          mkdir -p dist
          # Create distribution package
          tar -czf dist/alejo-latest.tar.gz --exclude="node_modules" --exclude=".git" .
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alejo-build
          path: dist/
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/[MAJOR')
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: alejo-build
          path: dist
          
      - name: Display structure of downloaded files
        run: ls -la dist
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your deployment commands here
          echo "Deployed successfully to staging"
